/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.itcast.frame;

import com.itcast.util.NetUtil;
import com.sun.org.apache.xml.internal.serialize.OutputFormat;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import okhttp3.Call;
import okhttp3.Headers;
import okhttp3.MediaType;
import okhttp3.Response;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame {
    
    private String headers;
    private String body;
    private String dataFormat;
    private String paramBody = "";
    private String headersBody = "";
    private String resp_RadioButton = "Body";//Response区域单选按钮状态，默认选中Body
    private String requ_RadioButton = "Body";//Request区域单选按钮状态，默认选中Body
    
    public void setBody(String body){
        this.body = body;
    }
    
    public String getBody(){
        return body;
    }
    
    public void setHeaders(String headers){
        this.headers = headers;
    }
    
    public String getHeaders(){
        return headers;
    }

    /**
     * Creates new form MainFrame
     */
     public MainFrame() {
        initComponents();
        //居中显示
        this.setLocationRelativeTo(null);
        //设置大小不可被修改
        this.setResizable(false);
        //设置标题
        this.setTitle("接口测试工具");
        
        //设置文本框提示
        interfaceText.setText("请输入测试接口");
        interfaceText.setForeground(Color.GRAY);
        
        //设置Request区域Body的提示信息
        requestBodyArea.setText("key1:value1\nkey2:value2");
        //设置Request区域Headers的提示信息
        requestHeadersArea.setText("User-Agent:Mozilla/5.0\nCookie:key=value;");
        requestBodyArea.setForeground(Color.GRAY);
        requestHeadersArea.setForeground(Color.GRAY);
        
        //默认选中Request区域的Body按钮
        requestBodyButton.setSelected(true);
        //默认选中Response区域的Body按钮
        responseBodyButton.setSelected(true);
        
        //设置Request文本区域自动换行
        requestBodyArea.setLineWrap(true);
        //设置Response文本区域自动换行
        responseBodyArea.setLineWrap(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jComboBox2 = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        requestBodyButton = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox();
        interfaceText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestBodyArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        responseBodyButton = new javax.swing.JRadioButton();
        responseHeaderButton = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        responseBodyArea = new javax.swing.JTextArea();
        testingButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestHeadersArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        jRadioButton3.setText("Content-Type");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonGroup1.add(requestBodyButton);
        requestBodyButton.setText("Body");
        requestBodyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBodyButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Header");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GET", "POST", "PUT", "PATCH","DELETE"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        interfaceText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                interfaceTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                interfaceTextFocusLost(evt);
            }
        });
        interfaceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interfaceTextActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 22)); // NOI18N
        jLabel2.setText("Response");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "application/xml", "application/json", "multipart/form-data", "application/x-www-form-urlencoded" }));

        requestBodyArea.setColumns(20);
        requestBodyArea.setRows(5);
        requestBodyArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                requestBodyAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                requestBodyAreaFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(requestBodyArea);

        jLabel3.setFont(new java.awt.Font("宋体", 0, 22)); // NOI18N
        jLabel3.setText("Request");

        buttonGroup2.add(responseBodyButton);
        responseBodyButton.setText("Body");
        responseBodyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseBodyButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(responseHeaderButton);
        responseHeaderButton.setText("Header");
        responseHeaderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseHeaderButtonActionPerformed(evt);
            }
        });

        responseBodyArea.setColumns(20);
        responseBodyArea.setRows(5);
        jScrollPane2.setViewportView(responseBodyArea);

        testingButton.setText("→");
        testingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingButtonActionPerformed(evt);
            }
        });

        requestHeadersArea.setColumns(20);
        requestHeadersArea.setRows(5);
        requestHeadersArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                requestHeadersAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                requestHeadersAreaFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(requestHeadersArea);

        jLabel4.setText("Body");

        jLabel5.setText("Headers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(responseBodyButton)
                                .addGap(33, 33, 33)
                                .addComponent(responseHeaderButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(169, 169, 169)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(interfaceText, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interfaceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(testingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(responseHeaderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(responseBodyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * 测试接口文本框的点击事件
     * @param evt 
     */
    private void interfaceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interfaceTextActionPerformed
        
    }//GEN-LAST:event_interfaceTextActionPerformed

    /**
     * 接口文本框获得焦点后执行该方法
     * @param evt 
     */
    private void interfaceTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_interfaceTextFocusGained
        //获得焦点后，判断用户是否输入了测试接口
        String text = interfaceText.getText().toString();
        if(text.equals("请输入测试接口")){
            //用户未输入测试接口，将提示信息清除
            interfaceText.setText("");
        }else{
            //用户输入了测试接口，继续让用户输入
        }
    }//GEN-LAST:event_interfaceTextFocusGained

    /**
     * 接口文本框失去焦点后执行该方法
     * @param evt 
     */
    private void interfaceTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_interfaceTextFocusLost
         //失去焦点后，判断用户是否输入了测试接口
         String text = interfaceText.getText().toString();
        if(text.equals("")){
            //为空，显示提示信息
            interfaceText.setText("请输入测试接口");
        }else{
            //不为空，不显示提示信息
        }
    }//GEN-LAST:event_interfaceTextFocusLost

    /**
     * 测试按钮的点击事件
     * 点击测试按钮后，获取接口文本中的接口，并访问
     * @param evt 
     */
    private void testingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingButtonActionPerformed
         String item = jComboBox1.getSelectedItem().toString();
        //获取接口文本内容
         String text = interfaceText.getText().toString();
         System.out.println(text);
         //如果文本内容为"请输入测试接口"，则证明用户未输入测试接口，提示用户
         if(text.equals("")){
             JOptionPane.showMessageDialog(null, "您还没有输入测试接口！");
             return;
         }
         if(text.equals("请输入测试接口")){
             //提示用户
              JOptionPane.showMessageDialog(null, "您还没有输入测试接口！");
         }else{
             //判断用户输入是否为一个接口
            String regex = "^([hH][tT]{2}[pP]:/*|[hH][tT]{2}[pP][sS]:/*|[fF][tT][pP]:/*)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+(\\?{0,1}(([A-Za-z0-9-~]+\\={0,1})([A-Za-z0-9-~]*)\\&{0,1})*)$";
            Pattern pattern = Pattern.compile(regex);
            if (!pattern.matcher(text).matches()) {
                  JOptionPane.showMessageDialog(null, "非法的接口输入！");
                  //将接口文本清空
                  interfaceText.setText("");
            } else {
                try {
                    //测试接口
                    testingInterface(text,item);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
         }
    }//GEN-LAST:event_testingButtonActionPerformed

    /**
     * Response区域Header按钮的点击事件
     * @param evt 
     */
    private void responseHeaderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseHeaderButtonActionPerformed
        resp_RadioButton = "Headers";
        //点击按钮后，显示当前请求的头信息
        //获取头信息
        String headers = getHeaders();
        //将Response区域文本框清空，并显示头信息
        responseBodyArea.setText(headers);
    }//GEN-LAST:event_responseHeaderButtonActionPerformed

    /**
     * Response区域Body按钮的点击事件
     * @param evt 
     */
    private void responseBodyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseBodyButtonActionPerformed
        resp_RadioButton = "Body";
        //点击按钮后，显示当前请求的正文内容
        //获取正文内容
        String body = getBody();
        if(dataFormat.equals("html")){
            //将内容以html的形式格式化输出
            Document doc = Jsoup.parse(body);
            body = doc.html();
        }else if(dataFormat.equals("json")){
             //将内容以json的形式格式化输出
             body = JsonFormart(body);
        }else if(dataFormat.equals("xml")){
            
        }
        //将Response区域文本框清空，并显示正文内容
        responseBodyArea.setText(body);
    }//GEN-LAST:event_responseBodyButtonActionPerformed

    /**
     * Request区域的Body获得焦点后执行该方法
     * @param evt 
     */
    private void requestBodyAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requestBodyAreaFocusGained
        //获得焦点后，判断用户是否输入了接口参数
        String text = requestBodyArea.getText().toString();
        if(text.equals("key1:value1\nkey2:value2") || text.equals("User-Agent:Mozilla/5.0\nCookie:key=value;")){
            //用户未输入测试参数，将提示信息清除
            requestBodyArea.setText("");
        }else{
            //用户输入了测试参数化，继续让用户输入
        }
    }//GEN-LAST:event_requestBodyAreaFocusGained

     /**
     * Request区域的Body失去焦点后执行该方法
     * @param evt 
     */
    private void requestBodyAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requestBodyAreaFocusLost
        //失去焦点后，判断用户是否输入了测试参数
        String text = requestBodyArea.getText().toString();
        if(text.equals("")){
            //为空，显示提示信息
            if(requ_RadioButton.equals("Body")){
                 requestBodyArea.setText("key1:value1\nkey2:value2");

            }else if(requ_RadioButton.equals("Headers")){
                 requestBodyArea.setText("User-Agent:Mozilla/5.0\nCookie:key=value;");
            }
        }else{
            //不为空，不显示提示信息
        }
    }//GEN-LAST:event_requestBodyAreaFocusLost

    /**
     * Request区域Body的点击事件
     * @param evt 
     */
    private void requestBodyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBodyButtonActionPerformed
        requ_RadioButton = "Body";
        //点击Body按钮，显示参数信息
        //先获取用户输入的信息
        headersBody = requestBodyArea.getText().toString();
        //清空文本框内容，并显示参数信息
        //首先判断用户是否输入过参数
        if(paramBody.equals("") || paramBody.equals("key1:value1\nkey2:value2")){
            //用户未曾输入过参数
            //显示提示信息
            requestBodyArea.setText("key1:value1\nkey2:value2");
            System.out.println(paramBody);
        }else{
            //用户输入过参数
            //将参数信息重新显示
            requestBodyArea.setText(paramBody);
        }
    }//GEN-LAST:event_requestBodyButtonActionPerformed

    /**
     * Request区域Headers的点击事件
     * @param evt 
     */
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        requ_RadioButton = "Headers";
        //点击Headers按钮，显示头信息
        //清空文本框内容，并显示头信息
        //先获取用户输入的参数
        paramBody = requestBodyArea.getText().toString();
        //判断用户是否输入过参数
         //首先判断用户是否输入过参数
        if(headersBody.equals("") || headersBody.equals("User-Agent:Mozilla/5.0\nCookie:key=value;")){
            //用户未曾输入过参数
            //显示提示信息
            requestBodyArea.setText("User-Agent:Mozilla/5.0\nCookie:key=value;");
        }else{
            //用户输入过参数
            //将参数信息重新显示
            requestBodyArea.setText(headersBody);
        }
        requestBodyArea.setText("User-Agent:Mozilla/5.0\nCookie:key=value;");
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    /**
     * Reuqest区域的Headers获取焦点后执行该方法
     * @param evt 
     */
    private void requestHeadersAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requestHeadersAreaFocusGained
         //获得焦点后，判断用户是否输入了接口参数
        String text = requestHeadersArea.getText().toString();
        if(text.equals("key1:value1\nkey2:value2") || text.equals("User-Agent:Mozilla/5.0\nCookie:key=value;")){
            //用户未输入测试参数，将提示信息清除
            requestHeadersArea.setText("");
        }else{
            //用户输入了测试参数化，继续让用户输入
        }
    }//GEN-LAST:event_requestHeadersAreaFocusGained

    /**
     * Request区域的Headers失去焦点后执行该方法
     * @param evt 
     */
    private void requestHeadersAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requestHeadersAreaFocusLost
          //失去焦点后，判断用户是否输入了测试参数
        String text = requestHeadersArea.getText().toString();
        if(text.equals("")){
            //为空，显示提示信息
            requestHeadersArea.setText("User-Agent:Mozilla/5.0\nCookie:key=value;");
        }else{
            //不为空，不显示提示信息
        }
    }//GEN-LAST:event_requestHeadersAreaFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField interfaceText;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea requestBodyArea;
    private javax.swing.JRadioButton requestBodyButton;
    private javax.swing.JTextArea requestHeadersArea;
    private javax.swing.JTextArea responseBodyArea;
    private javax.swing.JRadioButton responseBodyButton;
    private javax.swing.JRadioButton responseHeaderButton;
    private javax.swing.JButton testingButton;
    // End of variables declaration//GEN-END:variables

    private static String getLevelStr(int level) {
        StringBuffer levelStr = new StringBuffer();
        for (int levelI = 0; levelI < level; levelI++) {
            levelStr.append("\t");
        }
        return levelStr.toString(); 
    }
    public static String JsonFormart(String s) {
        int level = 0;
        //存放格式化的json字符串
        StringBuffer jsonForMatStr = new StringBuffer();
        for(int index=0;index<s.length();index++)//将字符串中的字符逐个按行输出
        {
            //获取s中的每个字符
            char c = s.charAt(index);
//          System.out.println(s.charAt(index));
             
            //level大于0并且jsonForMatStr中的最后一个字符为\n,jsonForMatStr加入\t
            if (level > 0 && '\n' == jsonForMatStr.charAt(jsonForMatStr.length() - 1)) {
                jsonForMatStr.append(getLevelStr(level));
//                System.out.println("123"+jsonForMatStr);
            }
            //遇到"{"和"["要增加空格和换行，遇到"}"和"]"要减少空格，以对应，遇到","要换行
            switch (c) {
            case '{':
            case '[':
                jsonForMatStr.append(c + "\n");
                level++;
                break;
            case ',':
                jsonForMatStr.append(c + "\n");            
                break;
            case '}':
            case ']':
                jsonForMatStr.append("\n");
                level--;
                jsonForMatStr.append(getLevelStr(level));
                jsonForMatStr.append(c);
                break;
            default:
                jsonForMatStr.append(c);
                break;
            }
        }
        return jsonForMatStr.toString();
    }
        
    /**
     * 测试接口方法
     * @param text
     * @param item 
     */
    private void testingInterface(String text,String item) throws IOException {
        NetUtil netUtil = NetUtil.getInstance();
        String param = requestBodyArea.getText().toString();        
        //判断请求类型
        if(item.equals("GET")){
            //GET请求
            netUtil.getDataAsynFromNet(text,new NetUtil.MyNetCall() {
                @Override
                public void success(Call call, Response response) throws IOException {
                    if(response.code() == 200){
                        //获取响应内容
                        String body = response.body().string();
                        //获取头信息
                        Headers headers = response.headers();
                        //将头信息暴露出去，供其它方法使用
                        setHeaders(headers.toString());
                        //将响应内容暴露出去，供其它方法使用
                        setBody(body);
                        //将响应内容输出到Response区域的Body中
                        //先判断输出内容是什么格式
                        //分为html、json、xml三种格式分别讨论
                        String contentType = response.body().contentType().toString();
                        if(contentType.contains("html")){
                            dataFormat="html";
                            //将内容以html的形式格式化输出
                            Document doc = Jsoup.parse(body);
                            body = doc.html();
                        }else if(contentType.contains("json")){
                            dataFormat="json";
                            //将内容以json的形式格式化输出
                            body = JsonFormart(body);
                        }else if(contentType.contains("xml")){
                            dataFormat="xml";
                            //将内容以xml的形式格式化输出
                        }
                        //判断Response区域单选按钮状态
                        if(resp_RadioButton.equals("Body")){
                            //输出正文内容
                            responseBodyArea.setText(body);
                        }else if(resp_RadioButton.equals("Headers")){
                            //输出头信息
                            responseBodyArea.setText(headers.toString());
                        }
                    }
                }

                @Override
                public void failed(Call call, IOException e) {
                  
                }
            });
        }else if(item.equals("POST")){
            List<String> paramList = new ArrayList();
            //POST请求，获取请求参数
            String paramBody = requestBodyArea.getText().toString();
            //解析请求参数
            BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(paramBody.getBytes(Charset.forName("utf8"))), Charset.forName("utf8")));
            while(true){
                String line = br.readLine();
                if(line == null){
                    break;
                }
                paramList.add(line);
            }
            Map<String,String> map = new HashMap<String, String>();
            //分割字符串
            for(String str : paramList){
                String[] split = str.split(":");
                //将用户输入参数信息封装成Map
                map.put(split[0],split[1]);
            }
            //请求接口
            netUtil.postDataAsynToNet(text, map, new NetUtil.MyNetCall() {

                @Override
                public void success(Call call, Response response) throws IOException {
                    if(response.code() == 200){
                        //获取响应内容
                        String body = response.body().string();
                        //获取头信息
                        Headers headers = response.headers();
                        //将头信息暴露出去，供其它方法使用
                        setHeaders(headers.toString());
                        //将响应内容暴露出去，供其它方法使用
                        setBody(body);
                        //将响应内容输出到Response区域的Body中
                        //先判断输出内容是什么格式
                        //分为html、json、xml三种格式分别讨论
                        String contentType = response.body().contentType().toString();
                        if(contentType.contains("html")){
                            dataFormat="html";
                            //将内容以html的形式格式化输出
                            Document doc = Jsoup.parse(body);
                            body = doc.html();
                        }else if(contentType.contains("json")){
                            dataFormat="json";
                            //将内容以json的形式格式化输出
                            body = JsonFormart(body);
                        }else if(contentType.contains("xml")){
                            dataFormat="xml";
                            //将内容以xml的形式格式化输出
                        }
                        //判断Response区域单选按钮状态
                        if(resp_RadioButton.equals("Body")){
                            //输出正文内容
                            responseBodyArea.setText(body);
                        }else if(resp_RadioButton.equals("Headers")){
                            //输出头信息
                            responseBodyArea.setText(headers.toString());
                        }
                    }
                }

                @Override
                public void failed(Call call, IOException e) {
                }
            });
        }else if(item.equals("PUT")){
        
        }else if(item.equals("PATCH")){
        
        }else if(item.equals("DELETE")){
            
        }
    }
}
